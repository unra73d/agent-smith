name: Build Application

on:
  push:
    tags: # Trigger on new tags like v1.0.0, v1.2.3 etc.
      - "v*"
  workflow_dispatch: # Allows manual triggering

jobs:
  read-version:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.read_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for go-winres to get git tags for versioning if needed

      - name: Read version from VERSION file or Git tag
        id: read_version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            APP_VERSION="${{ github.ref_name }}"
            # Remove 'v' prefix if present
            APP_VERSION="${APP_VERSION#v}"
          elif [[ -f VERSION ]]; then
            APP_VERSION=$(cat VERSION)
          else
            APP_VERSION="0.0.0-dev"
          fi
          echo "App version: $APP_VERSION"
          echo "version=$APP_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: read-version
    strategy:
      matrix:
        os_config:
          - os_runner: ubuntu-22.04
            goos: linux
            goarch: amd64
            deps: "sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev"
            output_suffix: "_linux_amd64"
            # We'll construct the full output name in the run step

          - os_runner: macos-latest
            goos: darwin
            goarch: arm64
            deps: ""
            output_suffix: "_macos_amd64.zip"
            # macOS build handled in the run step

          - os_runner: windows-latest
            goos: windows
            goarch: amd64
            deps: 'go install github.com/tc-hib/go-winres@latest && go-winres make --product-version "$APP_VERSION" --file-version "$APP_VERSION.${{ github.run_number }}" --arch amd64 -rc platform/windows/windows.rc'
            output_suffix: "_windows_amd64.exe"
            # We'll construct the full output name in the run step

    runs-on: ${{ matrix.os_config.os_runner }}
    env:
      APP_NAME: AgentSmith
      APP_VERSION: ${{ needs.read-version.outputs.app_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"

      - name: Tidy Go modules
        run: go mod tidy
        shell: bash

      - name: Set BUILD_NUMBER (for macOS Info.plist)
        run: echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Install Dependencies & Build
        run: |
          # Construct the full output filename using env and matrix variables
          # This ensures all contexts are resolved correctly when the shell script runs
          OUTPUT_FILENAME="${APP_NAME}_${APP_VERSION}${MATRIX_OS_CONFIG_OUTPUT_SUFFIX}"
          # For macOS, the zipped app is the final artifact, but binary name inside is just APP_NAME
          MACOS_ZIP_FILENAME="${APP_NAME}_${APP_VERSION}${MATRIX_OS_CONFIG_OUTPUT_SUFFIX}"

          if [[ -n "${{ matrix.os_config.deps }}" ]]; then
            echo "--- Installing dependencies for ${{ matrix.os_config.goos }} ---"
            # Substitute deps directly here; $APP_VERSION and ${{ github.run_number }} will work.
            eval "${{ matrix.os_config.deps }}"
          fi

          echo "--- Building for ${{ matrix.os_config.goos }}/${{ matrix.os_config.goarch }} ---"
          if [[ "${{ matrix.os_config.goos }}" == "darwin" ]]; then
            # macOS specific build and bundling
            sed -i '' "s/__VERSION__/$APP_VERSION/g" platform/macos/Info.plist
            sed -i '' "s/__BUILD_NUMBER__/$BUILD_NUMBER/g" platform/macos/Info.plist
            
            CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o "${APP_NAME}_binary" src/app/main.go

            APP_BUNDLE_NAME="${APP_NAME}.app"
            mkdir -p "${APP_BUNDLE_NAME}/Contents/MacOS"
            mkdir -p "${APP_BUNDLE_NAME}/Contents/Resources"
            
            mv "${APP_NAME}_binary" "${APP_BUNDLE_NAME}/Contents/MacOS/${APP_NAME}"
            cp platform/macos/Info.plist "${APP_BUNDLE_NAME}/Contents/Info.plist"
            cp assets/icon.icns "${APP_BUNDLE_NAME}/Contents/Resources/icon.icns"
            
            zip -r "$MACOS_ZIP_FILENAME" "${APP_BUNDLE_NAME}"
          elif [[ "${{ matrix.os_config.goos }}" == "linux" ]]; then
            CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags='-s -w' -o "$OUTPUT_FILENAME" src/app/main.go
          elif [[ "${{ matrix.os_config.goos }}" == "windows" ]]; then
            CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ go build -ldflags='-s -w -H windowsgui' -o "$OUTPUT_FILENAME" src/app/main.go
          fi
        shell: bash
        # Pass matrix values explicitly to the shell environment for the run step
        env:
          MATRIX_OS_CONFIG_DEPS: ${{ matrix.os_config.deps }}
          MATRIX_OS_CONFIG_OUTPUT_SUFFIX: ${{ matrix.os_config.output_suffix }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-${{ matrix.os_config.goos }}-${{ matrix.os_config.goarch }}
          # Construct artifact paths dynamically using shell expansion of env vars
          # and explicit matrix context.
          # The artifact paths need to match the exact filenames created.
          path: |
            ${{ env.APP_NAME }}_${{ env.APP_VERSION }}${{ matrix.os_config.output_suffix }}
          if-no-files-found: error
