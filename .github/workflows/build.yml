name: Build Application

on:
  push:
    tags: # Trigger on new tags like v1.0.0, v1.2.3 etc.
      - "v*"
  workflow_dispatch: # Allows manual triggering

jobs:
  read-version:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.read_version.outputs.version }}
      app_name: ${{ steps.set_app_name.outputs.app_name }} # Add this line
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for go-winres to get git tags for versioning if needed

      - name: Set Application Name
        id: set_app_name # Add this step
        run: echo "app_name=AgentSmith" >> $GITHUB_OUTPUT

      - name: Read version from VERSION file or Git tag
        id: read_version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            APP_VERSION="${{ github.ref_name }}"
            # Remove 'v' prefix if present
            APP_VERSION="${APP_VERSION#v}"
          elif [[ -f VERSION ]]; then
            APP_VERSION=$(cat VERSION)
          else
            APP_VERSION="0.0.0-dev"
          fi
          echo "App version: $APP_VERSION"
          echo "version=$APP_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: read-version # Depends on the version being read
    strategy:
      matrix:
        os_config:
          - os_runner: ubuntu-22.04
            goos: linux
            goarch: amd64
            deps: "sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev"
            output_suffix: "_linux_amd64"
            # Use needs.read-version.outputs.app_name and app_version here
            build_cmd: "CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags='-s -w' -o '${{ needs.read-version.outputs.app_name }}_${{ needs.read-version.outputs.app_version }}${{ matrix.os_config.output_suffix }}' main.go"

          - os_runner: macos-latest # macos-13 or macos-12 if you need older
            goos: darwin
            goarch: amd64
            deps: "" # No special deps for macOS build usually
            output_suffix: "_macos_amd64.zip" # Will contain the .app bundle
            # macOS build command is more complex, handled in its own step below

          - os_runner: windows-latest
            goos: windows
            goarch: amd64
            # Use needs.read-version.outputs.app_version here
            deps: 'go install github.com/tc-hib/go-winres@latest && go-winres make --product-version "${{ needs.read-version.outputs.app_version }}" --file-version "${{ needs.read-version.outputs.app_version }}.${{ github.run_number }}" --arch amd64 -rc platform/windows/windows.rc'
            output_suffix: "_windows_amd64.exe"
            # Use needs.read-version.outputs.app_name and app_version here
            build_cmd: "CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ go build -ldflags='-s -w -H windowsgui' -o '${{ needs.read-version.outputs.app_name }}_${{ needs.read-version.outputs.app_version }}${{ matrix.os_config.output_suffix }}' main.go"

    runs-on: ${{ matrix.os_config.os_runner }}
    # Remove this env block
    # env:
    #   APP_NAME: AgentSmith
    #   APP_VERSION: ${{ needs.read-version.outputs.app_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"

      - name: Tidy Go modules
        run: go mod tidy
        shell: bash

      - name: Set BUILD_NUMBER (for macOS Info.plist)
        run: echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      # Combined Build Step using matrix strategy
      - name: Install Dependencies & Build
        run: |
          if [[ -n "${{ matrix.os_config.deps }}" ]]; then
            echo "--- Installing dependencies for ${{ matrix.os_config.goos }} ---"
            ${{ matrix.os_config.deps }}
          fi

          echo "--- Building for ${{ matrix.os_config.goos }}/${{ matrix.os_config.goarch }} ---"
          if [[ "${{ matrix.os_config.goos }}" == "darwin" ]]; then
            # macOS specific build and bundling
            # Use needs.read-version.outputs.app_version directly
            sed -i '' "s/__VERSION__/${{ needs.read-version.outputs.app_version }}/g" platform/macos/Info.plist
            sed -i '' "s/__BUILD_NUMBER__/${{ env.BUILD_NUMBER }}/g" platform/macos/Info.plist
            
            # Use needs.read-version.outputs.app_name for the binary name
            CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o "${{ needs.read-version.outputs.app_name }}_binary" main.go

            # Use needs.read-version.outputs.app_name for the app bundle name
            APP_BUNDLE_NAME="${{ needs.read-version.outputs.app_name }}.app"
            mkdir -p "${APP_BUNDLE_NAME}/Contents/MacOS"
            mkdir -p "${APP_BUNDLE_NAME}/Contents/Resources"
            
            # Use needs.read-version.outputs.app_name for the binary within the app bundle
            mv "${{ needs.read-version.outputs.app_name }}_binary" "${APP_BUNDLE_NAME}/Contents/MacOS/${{ needs.read-version.outputs.app_name }}"
            cp platform/macos/Info.plist "${APP_BUNDLE_NAME}/Contents/Info.plist"
            cp assets/icon.icns "${APP_BUNDLE_NAME}/Contents/Resources/icon.icns"
            
            # Use needs.read-version.outputs.app_name and app_version for the zip file name
            zip -r "${{ needs.read-version.outputs.app_name }}_${{ needs.read-version.outputs.app_version }}${{ matrix.os_config.output_suffix }}" "${APP_BUNDLE_NAME}"
          else
            # Generic build command for Linux/Windows
            ${{ matrix.os_config.build_cmd }}
          fi
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          # Use needs.read-version.outputs.app_name and app_version here
          name: ${{ needs.read-version.outputs.app_name }}-${{ needs.read-version.outputs.app_version }}-${{ matrix.os_config.goos }}-${{ matrix.os_config.goarch }}
          path: |
            # Update paths to reflect dynamic naming based on APP_NAME and APP_VERSION
            ${{ needs.read-version.outputs.app_name }}_${{ needs.read-version.outputs.app_version }}_linux_amd64
            ${{ needs.read-version.outputs.app_name }}_${{ needs.read-version.outputs.app_version }}_windows_amd64.exe
            ${{ needs.read-version.outputs.app_name }}_${{ needs.read-version.outputs.app_version }}_macos_amd64.zip
          if-no-files-found: error
